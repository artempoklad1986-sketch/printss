<?php
mb_internal_encoding('UTF-8');
date_default_timezone_set('Europe/Moscow');
session_start();

$BASE = __DIR__;
$configFile = $BASE.'/config.json';
$photoConfigFile = $BASE.'/photo_config.json';
$uploadsDir = $BASE.'/uploads';
$ordersLog = $BASE.'/orders.txt';
$customersFile = $BASE.'/customers.json';

// Создаем папку для загрузок если не существует
if (!is_dir($uploadsDir)) @mkdir($uploadsDir, 0775, true);
if (!file_exists($uploadsDir.'/.htaccess')) {
    @file_put_contents($uploadsDir.'/.htaccess', 'php_flag engine off\nOptions -ExecCGI\n<FilesMatch \'\.(php|phar|phtml|cgi|pl|py)$\'>\nDeny from all\n</FilesMatch>\n');
}

// Загружаем основной конфиг
$cfg = json_decode(@file_get_contents($configFile), true) ?? [];

// Функция для загрузки конфига фотоконструктора ИЗ АДМИНКИ
function loadPhotoConfig($photoConfigFile) {
    $photoConfig = json_decode(@file_get_contents($photoConfigFile), true);

    if (!$photoConfig) {
        // Дефолтная конфигурация только если нет файла
        $photoConfig = [
            'enabled' => true,
            'max_photos' => 100,
            'max_file_size' => 10,
            'supported_formats' => ['jpg', 'jpeg', 'png', 'heic', 'heif'],
            'sizes' => [
                ['name' => '10×15', 'w' => 10, 'h' => 15, 'base' => 30, 'enabled' => true, 'popular' => true],
                ['name' => '15×21', 'w' => 15, 'h' => 21, 'base' => 50, 'enabled' => true, 'popular' => true],
                ['name' => 'A4', 'w' => 21, 'h' => 29.7, 'base' => 120, 'enabled' => true, 'popular' => false],
                ['name' => 'A3', 'w' => 29.7, 'h' => 42, 'base' => 200, 'enabled' => true, 'popular' => false],
                ['name' => '30×40', 'w' => 30, 'h' => 40, 'base' => 300, 'enabled' => true, 'popular' => false],
                ['name' => '50×70', 'w' => 50, 'h' => 70, 'base' => 800, 'enabled' => true, 'popular' => false]
            ],
            'papers' => [
                ['name' => 'Матовая', 'delta' => 0, 'enabled' => true, 'description' => 'Классическая матовая бумага'],
                ['name' => 'Глянец', 'delta' => 10, 'enabled' => true, 'description' => 'Глянцевая бумага с блеском']
            ],
            'corrections' => [
                ['name' => 'Нет', 'delta' => 0, 'enabled' => true, 'description' => 'Без коррекции'],
                ['name' => 'Легкая', 'delta' => 15, 'enabled' => true, 'description' => 'Автокоррекция яркости и контраста'],
                ['name' => 'Профессиональная', 'delta' => 50, 'enabled' => true, 'description' => 'Ручная коррекция дизайнером']
            ],
            'processing_options' => [
                ['name' => 'Кадрирование', 'price' => 20, 'enabled' => true, 'description' => 'Обрезка по нужному размеру'],
                ['name' => 'Удаление красных глаз', 'price' => 30, 'enabled' => true, 'description' => 'Коррекция эффекта красных глаз'],
                ['name' => 'Черно-белое', 'price' => 10, 'enabled' => true, 'description' => 'Преобразование в ч/б']
            ],
            'delivery_options' => [
                ['name' => 'Самовывоз', 'price' => 0, 'enabled' => true, 'description' => 'Забрать в офисе'],
                ['name' => 'Доставка по городу', 'price' => 200, 'enabled' => true, 'description' => 'Доставка курьером'],
                ['name' => 'Почта России', 'price' => 300, 'enabled' => true, 'description' => 'Отправка почтой']
            ],
            'discounts' => [
                ['name' => 'От 50 фото', 'threshold' => 50, 'discount_percent' => 10, 'enabled' => true],
                ['name' => 'От 100 фото', 'threshold' => 100, 'discount_percent' => 15, 'enabled' => true],
                ['name' => 'От 200 фото', 'threshold' => 200, 'discount_percent' => 20, 'enabled' => false]
            ]
        ];
        @file_put_contents($photoConfigFile, json_encode($photoConfig, JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT));
    }

    return $photoConfig;
}

$photoConfig = loadPhotoConfig($photoConfigFile);

// Фильтруем только включенные опции
$enabledSizes = array_filter($photoConfig['sizes'] ?? [], function($item) { return !empty($item['enabled']); });
$enabledPapers = array_filter($photoConfig['papers'] ?? [], function($item) { return !empty($item['enabled']); });
$enabledCorrections = array_filter($photoConfig['corrections'] ?? [], function($item) { return !empty($item['enabled']); });
$enabledProcessingOptions = array_filter($photoConfig['processing_options'] ?? [], function($item) { return !empty($item['enabled']); });
$enabledDeliveryOptions = array_filter($photoConfig['delivery_options'] ?? [], function($item) { return !empty($item['enabled']); });
$enabledDiscounts = array_filter($photoConfig['discounts'] ?? [], function($item) { return !empty($item['enabled']); });

// Helpers
function esc($s){ return htmlspecialchars((string)$s, ENT_QUOTES|ENT_SUBSTITUTE, 'UTF-8'); }
function sanitize_text($s){ return trim(filter_var($s, FILTER_SANITIZE_FULL_SPECIAL_CHARS)); }

// CRM функция для обновления клиентов
function update_customer_info($customersFile, $name, $phone, $email = '', $orderData = null) {
    $customers = json_decode(@file_get_contents($customersFile), true) ?? [];

    $phone_clean = preg_replace('/[^0-9]/', '', $phone);
    $customer_id = $phone_clean;

    $existingCustomer = null;
    foreach ($customers as $key => $customer) {
        if ($customer['id'] === $customer_id) {
            $existingCustomer = $key;
            break;
        }
    }

    if ($existingCustomer !== null) {
        $customers[$existingCustomer]['last_contact'] = date('Y-m-d H:i:s');
        $customers[$existingCustomer]['orders_count']++;

        if ($orderData) {
            $customers[$existingCustomer]['total_spent'] += $orderData['total'] ?? 0;
            $customers[$existingCustomer]['orders'][] = [
                'id' => $orderData['id'],
                'date' => date('Y-m-d H:i:s'),
                'type' => $orderData['type'] ?? 'service',
                'total' => $orderData['total'] ?? 0,
                'status' => $orderData['status'] ?? 'new'
            ];
        }

        if ($email) $customers[$existingCustomer]['email'] = $email;
        if ($name) $customers[$existingCustomer]['name'] = $name;
    } else {
        $customers[] = [
            'id' => $customer_id,
            'name' => $name,
            'phone' => $phone,
            'email' => $email,
            'created_at' => date('Y-m-d H:i:s'),
            'last_contact' => date('Y-m-d H:i:s'),
            'orders_count' => 1,
            'total_spent' => $orderData['total'] ?? 0,
            'notes' => '',
            'tags' => ['Фотоконструктор'],
            'orders' => $orderData ? [[
                'id' => $orderData['id'],
                'date' => date('Y-m-d H:i:s'),
                'type' => $orderData['type'] ?? 'service',
                'total' => $orderData['total'] ?? 0,
                'status' => $orderData['status'] ?? 'new'
            ]] : []
        ];
    }

    @file_put_contents($customersFile, json_encode($customers, JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT));
}

// Улучшенная отправка email с поддержкой SMTP
function send_email($to, $subject, $body, $cfg) {
    $from = $cfg['email_from'] ?? 'noreply@' . ($_SERVER['HTTP_HOST'] ?? 'localhost');

    // SMTP отправка если включена
    if (!empty($cfg['smtp']['enabled'])) {
        return send_smtp_email($to, $subject, $body, $cfg);
    }

    // Обычная отправка через mail()
    $headers = "From: $from\r\n";
    $headers .= 'Reply-To: ' . ($cfg['email_reply'] ?: $from) . "\r\n";
    $headers .= "Content-Type: text/plain; charset=UTF-8\r\n";
    $headers .= "X-Mailer: PhotoConstructor/1.0\r\n";

    if (!empty($cfg['email_cc'])) {
        $headers .= 'CC: ' . $cfg['email_cc'] . "\r\n";
    }
    if (!empty($cfg['email_bcc'])) {
        $headers .= 'BCC: ' . $cfg['email_bcc'] . "\r\n";
    }

    return @mail($to, '=?UTF-8?B?'.base64_encode($subject).'?=', $body, $headers);
}

function send_smtp_email($to, $subject, $body, $cfg) {
    // Простая реализация SMTP через fsockopen
    $smtp = $cfg['smtp'];
    $host = $smtp['host'] ?? 'smtp.mail.ru';
    $port = $smtp['port'] ?? 465;
    $user = $smtp['user'] ?? '';
    $pass = $smtp['pass'] ?? '';
    $secure = $smtp['secure'] ?? 'ssl';

    if (!$user || !$pass) return false;

    try {
        $context = stream_context_create([
            'ssl' => [
                'verify_peer' => false,
                'verify_peer_name' => false,
                'allow_self_signed' => true
            ]
        ]);

        $conn = $secure === 'ssl'
            ? stream_socket_client("ssl://$host:$port", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $context)
            : fsockopen($host, $port, $errno, $errstr, 30);

        if (!$conn) return false;

        // SMTP команды
        fgets($conn, 512);
        fputs($conn, "EHLO $host\r\n");
        fgets($conn, 512);

        if ($secure === 'tls') {
            fputs($conn, "STARTTLS\r\n");
            fgets($conn, 512);
            stream_socket_enable_crypto($conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT);
            fputs($conn, "EHLO $host\r\n");
            fgets($conn, 512);
        }

        fputs($conn, "AUTH LOGIN\r\n");
        fgets($conn, 512);
        fputs($conn, base64_encode($user) . "\r\n");
        fgets($conn, 512);
        fputs($conn, base64_encode($pass) . "\r\n");
        fgets($conn, 512);

        fputs($conn, "MAIL FROM: <$user>\r\n");
        fgets($conn, 512);
        fputs($conn, "RCPT TO: <$to>\r\n");
        fgets($conn, 512);
        fputs($conn, "DATA\r\n");
        fgets($conn, 512);

        $email_data = "From: $user\r\n";
        $email_data .= "To: $to\r\n";
        $email_data .= 'Subject: =?UTF-8?B?' . base64_encode($subject) . "?=\r\n";
        $email_data .= "Content-Type: text/plain; charset=UTF-8\r\n";
        $email_data .= "Content-Transfer-Encoding: 8bit\r\n\r\n";
        $email_data .= "$body\r\n.\r\n";

        fputs($conn, $email_data);
        fgets($conn, 512);
        fputs($conn, "QUIT\r\n");
        fclose($conn);

        return true;
    } catch (Exception $e) {
        return false;
    }
}

// Telegram уведомление
function send_telegram($cfg, $message) {
    if (empty($cfg['telegram']['enabled']) || empty($cfg['telegram']['token']) || empty($cfg['telegram']['chat'])) {
        return false;
    }

    $url = 'https://api.telegram.org/bot' . $cfg['telegram']['token'] . '/sendMessage';
    $data = [
        'chat_id' => $cfg['telegram']['chat'],
        'text' => $message,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
    curl_setopt($ch, CURLOPT_TIMEOUT, 15);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    $result = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    return $result !== false && $httpCode === 200;
}

// API для конфига (полная синхронизация с админкой)
if (isset($_GET['api']) && $_GET['api'] === 'config') {
    header('Content-Type: application/json; charset=utf-8');

    // Перегружаем конфиг на случай изменений
    $photoConfig = loadPhotoConfig($photoConfigFile);

    $response = [
        'enabled' => !empty($photoConfig['enabled']),
        'max_photos' => $photoConfig['max_photos'] ?? 100,
        'max_file_size' => $photoConfig['max_file_size'] ?? 10,
        'supported_formats' => $photoConfig['supported_formats'] ?? ['jpg', 'jpeg', 'png'],
        'sizes' => array_values(array_filter($photoConfig['sizes'] ?? [], function($item) { return !empty($item['enabled']); })),
        'papers' => array_values(array_filter($photoConfig['papers'] ?? [], function($item) { return !empty($item['enabled']); })),
        'corrections' => array_values(array_filter($photoConfig['corrections'] ?? [], function($item) { return !empty($item['enabled']); })),
        'processing_options' => array_values(array_filter($photoConfig['processing_options'] ?? [], function($item) { return !empty($item['enabled']); })),
        'delivery_options' => array_values(array_filter($photoConfig['delivery_options'] ?? [], function($item) { return !empty($item['enabled']); })),
        'discounts' => array_values(array_filter($photoConfig['discounts'] ?? [], function($item) { return !empty($item['enabled']); }))
    ];

    echo json_encode($response, JSON_UNESCAPED_UNICODE);
    exit;
}

// Скачивание фото из CRM админки для создания архива
if (isset($_GET['download_photo']) && !empty($_GET['filename'])) {
    $filename = basename($_GET['filename']);
    $filepath = $uploadsDir . '/' . $filename;

    if (file_exists($filepath) && preg_match('/^photo_/', $filename)) {
        $mimeType = mime_content_type($filepath);
        if (strpos($mimeType, 'image/') === 0) {
            header('Content-Type: ' . $mimeType);
            header('Content-Disposition: attachment; filename="' . $filename . '"');
            header('Content-Length: ' . filesize($filepath));
            header('Cache-Control: private');
            header('Expires: 0');
            readfile($filepath);
            exit;
        }
    }

    http_response_code(404);
    echo 'Файл не найден или недоступен';
    exit;
}

// Обработка заказа фото
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['mode']) && $_POST['mode'] === 'photo_order') {
    header('Content-Type: application/json; charset=utf-8');

    try {
        // Перегружаем конфиг для актуальных настроек
        $photoConfig = loadPhotoConfig($photoConfigFile);

        if (empty($photoConfig['enabled'])) {
            throw new Exception('Фотоконструктор временно отключен');
        }

        $name = sanitize_text($_POST['name'] ?? '');
        $email = sanitize_text($_POST['email'] ?? '');
        $phone = sanitize_text($_POST['phone'] ?? '');
        $comment = sanitize_text($_POST['comment'] ?? '');
        $size = sanitize_text($_POST['size'] ?? '');
        $paper = sanitize_text($_POST['paper'] ?? '');
        $qty = max(1, (int)($_POST['qty'] ?? 1));
        $correction = sanitize_text($_POST['correction'] ?? '');
        $paymentMethod = sanitize_text($_POST['payment_method'] ?? 'offline');
        $delivery = sanitize_text($_POST['delivery'] ?? '');

        // Дополнительные услуги
        $processingOptions = [];
        if (isset($_POST['processing_options']) && is_array($_POST['processing_options'])) {
            $processingOptions = array_map('sanitize_text', $_POST['processing_options']);
        }

        if (!$name || !$phone) {
            throw new Exception('Укажите имя и телефон');
        }

        if ($email && !filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new Exception('Некорректный email адрес');
        }

        // Валидация телефона
        $phoneClean = preg_replace('/[^0-9+]/', '', $phone);
        if (strlen($phoneClean) < 10) {
            throw new Exception('Некорректный номер телефона');
        }

        // Обработка загруженных фото с возможными редакторскими параметрами
        $uploadedPhotos = [];
        $photoCount = 0;
        $maxPhotos = $photoConfig['max_photos'] ?? 100;
        $maxFileSize = ($photoConfig['max_file_size'] ?? 10) * 1024 * 1024;
        $allowedFormats = $photoConfig['supported_formats'] ?? ['jpg', 'jpeg', 'png'];

        if (isset($_FILES['photos']) && is_array($_FILES['photos']['name'])) {
            $totalFiles = count($_FILES['photos']['name']);

            for ($i = 0; $i < min($totalFiles, $maxPhotos); $i++) {
                if ($_FILES['photos']['error'][$i] !== UPLOAD_ERR_OK) continue;

                $tmpPath = $_FILES['photos']['tmp_name'][$i];
                $originalName = $_FILES['photos']['name'][$i];
                $fileSize = $_FILES['photos']['size'][$i];

                if ($fileSize > $maxFileSize) continue;

                $imageInfo = @getimagesize($tmpPath);
                if ($imageInfo === false) continue;

                $ext = strtolower(pathinfo($originalName, PATHINFO_EXTENSION));
                if (!in_array($ext, $allowedFormats)) continue;

                // Уникальное имя файла с префиксом для идентификации
                $newName = 'photo_' . date('Ymd_His') . '_' . sprintf('%04d', $i) . '_' . bin2hex(random_bytes(4)) . '.' . $ext;
                $newPath = $uploadsDir . '/' . $newName;

                if (move_uploaded_file($tmpPath, $newPath)) {
                    // Ограничиваем права доступа
                    @chmod($newPath, 0644);

                    // Обработка параметров редактора изображений если переданы
                    $editParams = [];
                    if (isset($_POST['edit_params'][$i]) && is_array($_POST['edit_params'][$i])) {
                        $editParams = $_POST['edit_params'][$i];
                    }

                    $uploadedPhotos[] = [
                        'filename' => $newName,
                        'original_name' => $originalName,
                        'size' => $fileSize,
                        'dimensions' => $imageInfo[0] . 'x' . $imageInfo[1],
                        'mime_type' => $imageInfo['mime'],
                        'upload_time' => date('Y-m-d H:i:s'),
                        'edit_params' => $editParams // Параметры редактирования
                    ];
                    $photoCount++;
                }
            }
        }

        if ($photoCount === 0) {
            throw new Exception('Не удалось загрузить ни одного фото. Проверьте формат и размер файлов.');
        }

        // Валидация параметров печати из админки
        $enabledSizes = array_filter($photoConfig['sizes'] ?? [], function($item) { return !empty($item['enabled']); });
        $enabledPapers = array_filter($photoConfig['papers'] ?? [], function($item) { return !empty($item['enabled']); });
        $enabledCorrections = array_filter($photoConfig['corrections'] ?? [], function($item) { return !empty($item['enabled']); });

        $sizeConfig = null;
        foreach ($enabledSizes as $s) {
            if ($s['name'] === $size) {
                $sizeConfig = $s;
                break;
            }
        }
        if (!$sizeConfig) {
            throw new Exception('Выбранный размер недоступен');
        }

        $paperConfig = null;
        foreach ($enabledPapers as $p) {
            if ($p['name'] === $paper) {
                $paperConfig = $p;
                break;
            }
        }
        if (!$paperConfig) {
            throw new Exception('Выбранный тип бумаги недоступен');
        }

        $correctionConfig = null;
        foreach ($enabledCorrections as $c) {
            if ($c['name'] === $correction) {
                $correctionConfig = $c;
                break;
            }
        }
        if (!$correctionConfig) {
            throw new Exception('Выбранный тип коррекции недоступен');
        }

        // Расчет стоимости с учетом всех опций
        $basePrice = $sizeConfig['base'];
        $paperDelta = $paperConfig['delta'];
        $correctionDelta = $correctionConfig['delta'];

        // Дополнительные услуги
        $processingCost = 0;
        $selectedProcessing = [];
        $enabledProcessingOptions = array_filter($photoConfig['processing_options'] ?? [], function($item) { return !empty($item['enabled']); });

        foreach ($processingOptions as $procName) {
            foreach ($enabledProcessingOptions as $proc) {
                if ($proc['name'] === $procName) {
                    $processingCost += $proc['price'];
                    $selectedProcessing[] = $proc;
                    break;
                }
            }
        }

        // Доставка
        $deliveryCost = 0;
        $deliveryConfig = null;
        if ($delivery) {
            $enabledDeliveryOptions = array_filter($photoConfig['delivery_options'] ?? [], function($item) { return !empty($item['enabled']); });
            foreach ($enabledDeliveryOptions as $deliv) {
                if ($deliv['name'] === $delivery) {
                    $deliveryCost = $deliv['price'];
                    $deliveryConfig = $deliv;
                    break;
                }
            }
        }

        $pricePerPhoto = $basePrice + $paperDelta + $correctionDelta;
        $totalPhotoCost = $pricePerPhoto * $qty * $photoCount;
        $totalProcessingCost = $processingCost * $photoCount;
        $totalPrice = $totalPhotoCost + $totalProcessingCost + $deliveryCost;

        // Применяем скидки за количество
        $discount = 0;
        $discountInfo = null;
        $enabledDiscounts = array_filter($photoConfig['discounts'] ?? [], function($item) { return !empty($item['enabled']); });

        // Сортируем по убыванию порога для применения максимальной скидки
        usort($enabledDiscounts, function($a, $b) {
            return $b['threshold'] - $a['threshold'];
        });

        foreach ($enabledDiscounts as $discountRule) {
            if ($photoCount >= $discountRule['threshold']) {
                $discount = $discountRule['discount_percent'];
                $discountInfo = $discountRule;
                break;
            }
        }

        $discountAmount = 0;
        if ($discount > 0) {
            $discountAmount = ($totalPhotoCost + $totalProcessingCost) * ($discount / 100);
            $totalPrice -= $discountAmount;
        }

        // Создаем уникальный ID заказа
        $orderId = 'photo_' . time() . '_' . rand(1000, 9999);

        // ПОЛНАЯ структура заказа для CRM
        $order = [
            'id' => $orderId,
            'type' => 'photo_constructor',
            'timestamp' => date('Y-m-d H:i:s'),
            'name' => $name,
            'phone' => $phone,
            'email' => $email,
            'customer' => [
                'name' => $name,
                'phone' => $phone,
                'email' => $email,
                'phone_clean' => preg_replace('/[^0-9]/', '', $phone)
            ],
            'details' => [
                'size' => $size,
                'size_config' => $sizeConfig,
                'paper' => $paper,
                'paper_config' => $paperConfig,
                'qty_per_photo' => $qty,
                'correction' => $correction,
                'correction_config' => $correctionConfig,
                'processing_options' => $selectedProcessing,
                'delivery' => $delivery,
                'delivery_config' => $deliveryConfig,
                'photo_count' => $photoCount,
                'photos' => $uploadedPhotos,
                'comment' => $comment
            ],
            'pricing' => [
                'base_price_per_photo' => $basePrice,
                'paper_delta' => $paperDelta,
                'correction_delta' => $correctionDelta,
                'processing_cost_per_photo' => $processingCost,
                'price_per_photo' => $pricePerPhoto,
                'total_photos' => $photoCount,
                'total_copies' => $photoCount * $qty,
                'photo_cost' => $totalPhotoCost,
                'processing_cost' => $totalProcessingCost,
                'delivery_cost' => $deliveryCost,
                'discount_percent' => $discount,
                'discount_amount' => $discountAmount,
                'discount_info' => $discountInfo,
                'estimated_price' => $totalPrice,
                'total_price' => $totalPrice
            ],
            'payment_method' => $paymentMethod,
            'status' => $paymentMethod === 'online' ? 'pending_payment' : 'new',
            'created_at' => date('Y-m-d H:i:s'),
            'ip' => $_SERVER['REMOTE_ADDR'] ?? '',
            'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
            'source' => 'photo_constructor_premium_v2.0'
        ];

        // Логируем заказ для админки
        @file_put_contents($ordersLog, '['.date('Y-m-d H:i:s').'] '.json_encode($order, JSON_UNESCAPED_UNICODE).PHP_EOL, FILE_APPEND);

        // Обновляем CRM базу клиентов
        $crmOrderData = [
            'id' => $orderId,
            'type' => 'photo_constructor',
            'total' => $totalPrice,
            'status' => $order['status']
        ];
        update_customer_info($customersFile, $name, $phone, $email, $crmOrderData);

        // Подготавливаем ответ
        $response = [
            'ok' => true,
            'order_id' => $orderId,
            'photo_count' => $photoCount,
            'total_copies' => $photoCount * $qty,
            'estimated_price' => $totalPrice,
            'discount' => $discount > 0 ? $discount : null,
            'discount_amount' => $discountAmount > 0 ? $discountAmount : null,
            'processing_cost' => $totalProcessingCost > 0 ? $totalProcessingCost : null,
            'delivery_cost' => $deliveryCost > 0 ? $deliveryCost : null
        ];

        // Обработка онлайн оплаты ЮКасса
        if ($paymentMethod === 'online' && !empty($cfg['yukassa']['enabled']) && !empty($cfg['yukassa']['services']['photo_constructor'])) {
            $shop_id = $cfg['yukassa']['shop_id'];
            $secret_key = $cfg['yukassa']['secret_key'];
            $return_url = $cfg['yukassa']['return_url'] ?? ($cfg['site'] . '/payment_result.php');

            if ($shop_id && $secret_key && $totalPrice > 0) {
                $url = 'https://api.yookassa.ru/v3/payments';

                $paymentDescription = "Фотопечать: $photoCount фото × $qty экз.";
                if ($deliveryConfig) $paymentDescription .= " + " . $deliveryConfig['name'];

                $data = [
                    'amount' => ['value' => number_format($totalPrice, 2, '.', ''), 'currency' => 'RUB'],
                    'confirmation' => ['type' => 'redirect', 'return_url' => $return_url . '?order_id=' . urlencode($orderId)],
                    'description' => $paymentDescription,
                    'metadata' => [
                        'order_id' => $orderId,
                        'type' => 'photo_constructor',
                        'customer_phone' => $phone,
                        'customer_name' => $name,
                        'photo_count' => $photoCount
                    ],
                    'capture' => true
                ];

                $ch = curl_init($url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POST, true);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                curl_setopt($ch, CURLOPT_HTTPHEADER, [
                    'Content-Type: application/json',
                    'Idempotence-Key: ' . uniqid('photo_', true),
                    'Authorization: Basic ' . base64_encode($shop_id . ':' . $secret_key)
                ]);
                curl_setopt($ch, CURLOPT_TIMEOUT, 30);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);

                $result = curl_exec($ch);
                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close($ch);

                if ($result && $httpCode === 200) {
                    $paymentResponse = json_decode($result, true);
                    if ($paymentResponse && isset($paymentResponse['confirmation']['confirmation_url'])) {
                        $response['payment'] = true;
                        $response['payment_url'] = $paymentResponse['confirmation']['confirmation_url'];
                        $response['payment_id'] = $paymentResponse['id'];
                        $response['message'] = 'Заказ создан. Переходим к оплате...';

                        // Логируем информацию о платеже
                        $order['payment'] = [
                            'payment_id' => $paymentResponse['id'],
                            'payment_url' => $paymentResponse['confirmation']['confirmation_url'],
                            'amount' => $paymentResponse['amount']['value']
                        ];
                        @file_put_contents($ordersLog, '['.date('Y-m-d H:i:s').'] PAYMENT_CREATED: '.json_encode($order['payment'], JSON_UNESCAPED_UNICODE).PHP_EOL, FILE_APPEND);

                        echo json_encode($response);
                        exit;
                    }
                }
            }
        }

        // Отправка уведомлений ОБЯЗАТЕЛЬНО на artcopy78@bk.ru
        $emailTo = 'artcopy78@bk.ru'; // ЖЕСТКО задаем адрес

        // МЕГА-ДЕТАЛЬНОЕ письмо для админа
        $emailBody = "🎯 НОВЫЙ ЗАКАЗ ФОТОКОНСТРУКТОРА ПРЕМИУМ 🎯\n\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "📋 ИНФОРМАЦИЯ О ЗАКАЗЕ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "ID заказа: $orderId\n";
        $emailBody .= 'Дата и время: ' . date('d.m.Y H:i:s') . "\n";
        $emailBody .= "Источник: Фотоконструктор Премиум v2.0\n";
        $emailBody .= 'IP адрес: ' . ($order['ip'] ?: 'неизвестен') . "\n\n";

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "👤 ИНФОРМАЦИЯ О КЛИЕНТЕ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "Имя: $name\n";
        $emailBody .= "Телефон: $phone\n";
        if ($email) $emailBody .= "Email: $email\n";
        $emailBody .= "\n";

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "📸 ПАРАМЕТРЫ ПЕЧАТИ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "Размер фото: $size (" . $sizeConfig['w'] . '×' . $sizeConfig['h'] . " см)\n";
        $emailBody .= "Тип бумаги: $paper";
        if ($paperConfig['delta'] > 0) $emailBody .= ' (+' . $paperConfig['delta'] . ' ₽)';
        $emailBody .= "\n";
        $emailBody .= "Цветокоррекция: $correction";
        if ($correctionConfig['delta'] > 0) $emailBody .= ' (+' . $correctionConfig['delta'] . ' ₽)';
        $emailBody .= "\n";
        $emailBody .= "Тираж: $qty экз на каждое фото\n";
        $emailBody .= "Количество фото: $photoCount шт\n";
        $emailBody .= 'Общее количество отпечатков: ' . ($photoCount * $qty) . " шт\n";

        if (!empty($selectedProcessing)) {
            $emailBody .= "\n📎 Дополнительные услуги:\n";
            foreach ($selectedProcessing as $proc) {
                $emailBody .= '• ' . $proc['name'] . ' (' . $proc['price'] . " ₽ за фото)\n";
            }
        }

        if ($deliveryConfig) {
            $emailBody .= "\n🚚 Доставка: " . $deliveryConfig['name'];
            if ($deliveryConfig['price'] > 0) $emailBody .= ' (+' . $deliveryConfig['price'] . ' ₽)';
            $emailBody .= "\n";
        }

        $emailBody .= "\n";

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "💰 РАСЧЕТ СТОИМОСТИ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= 'Базовая цена за фото: ' . $sizeConfig['base'] . " ₽\n";
        if ($paperConfig['delta'] > 0) $emailBody .= 'Доплата за бумагу: +' . $paperConfig['delta'] . " ₽\n";
        if ($correctionConfig['delta'] > 0) $emailBody .= 'Доплата за коррекцию: +' . $correctionConfig['delta'] . " ₽\n";
        $emailBody .= "Цена за 1 отпечаток: $pricePerPhoto ₽\n";
        $emailBody .= 'Стоимость печати: ' . number_format($totalPhotoCost, 0) . " ₽\n";

        if ($totalProcessingCost > 0) {
            $emailBody .= 'Дополнительные услуги: +' . number_format($totalProcessingCost, 0) . " ₽\n";
        }

        if ($deliveryCost > 0) {
            $emailBody .= 'Доставка: +' . number_format($deliveryCost, 0) . " ₽\n";
        }

        if ($discount > 0) {
            $emailBody .= "СКИДКА за количество (-$discount%): -" . number_format($discountAmount, 0) . " ₽\n";
        }

        $emailBody .= "───────────────────────────────────────\n";
        $emailBody .= 'ИТОГО К ОПЛАТЕ: ' . number_format($totalPrice, 0) . " ₽\n";
        $emailBody .= "───────────────────────────────────────\n\n";

        if ($comment) {
            $emailBody .= "═══════════════════════════════════════\n";
            $emailBody .= "💬 КОММЕНТАРИЙ КЛИЕНТА\n";
            $emailBody .= "═══════════════════════════════════════\n";
            $emailBody .= "$comment\n\n";
        }

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "📁 ЗАГРУЖЕННЫЕ ФАЙЛЫ ($photoCount шт) - АРХИВ ДЛЯ СКАЧИВАНИЯ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $totalSize = 0;
        foreach ($uploadedPhotos as $i => $photo) {
            $sizeKB = round($photo['size']/1024, 1);
            $totalSize += $photo['size'];
            $emailBody .= ($i + 1) . '. ' . $photo['original_name'] . "\n";
            $emailBody .= "   Размер: {$sizeKB} КБ | Разрешение: " . $photo['dimensions'] . "\n";
            $emailBody .= '   Файл: ' . $photo['filename'] . "\n";
            $emailBody .= '   Ссылка для скачивания: ' . ($cfg['site'] ?: 'http://' . $_SERVER['HTTP_HOST']) . '/' . basename(__FILE__) . '?download_photo=' . urlencode($photo['filename']) . "\n";

            // Параметры редактора если есть
            if (!empty($photo['edit_params'])) {
                $emailBody .= "   📝 Параметры редактирования:\n";
                if (isset($photo['edit_params']['brightness'])) $emailBody .= '      Яркость: ' . $photo['edit_params']['brightness'] . "\n";
                if (isset($photo['edit_params']['contrast'])) $emailBody .= '      Контрастность: ' . $photo['edit_params']['contrast'] . "\n";
                if (isset($photo['edit_params']['crop'])) {
                    $crop = $photo['edit_params']['crop'];
                    $emailBody .= '      Кадрирование: x=' . $crop['x'] . ', y=' . $crop['y'] . ', w=' . $crop['width'] . ', h=' . $crop['height'] . "\n";
                }
            }
            $emailBody .= "\n";
        }
        $emailBody .= 'Общий объем файлов: ' . number_format($totalSize/1024/1024, 1) . " МБ\n\n";

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "🔧 ТЕХНИЧЕСКАЯ ИНФОРМАЦИЯ\n";
        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= 'Способ оплаты: ' . ($paymentMethod === 'online' ? 'Онлайн (ЮКасса)' : 'При получении') . "\n";
        $emailBody .= "Все файлы сохранены в папке: uploads/\n";
        $emailBody .= "Для просмотра заказа в CRM используйте ID: $orderId\n";
        $emailBody .= "Для создания архива всех фото заказа используйте функцию \"Скачать архив фото\" в админке\n\n";

        $emailBody .= "═══════════════════════════════════════\n";
        $emailBody .= "С уважением,\n";
        $emailBody .= "Система фотоконструктора премиум\n";
        $emailBody .= ($cfg['brand'] ?: 'ПРИНТСС') . "\n";
        $emailBody .= "═══════════════════════════════════════\n";

        // Отправляем МЕГА-email НА artcopy78@bk.ru
        $emailSent = send_email($emailTo, "🎯 Фотоконструктор Премиум #$orderId — $photoCount фото на $totalPrice ₽", $emailBody, $cfg);

        // Telegram уведомление с МЕГА-информацией
        $tgMsg = "🎯 <b>ФОТОКОНСТРУКТОР ПРЕМИУМ</b>\n\n";
        $tgMsg .= "🆔 <code>$orderId</code>\n";
        $tgMsg .= "👤 <b>$name</b>\n";
        $tgMsg .= "📞 <code>$phone</code>\n";
        if ($email) $tgMsg .= "✉️ <code>$email</code>\n";
        $tgMsg .= "\n📸 <b>Заказ:</b>\n";
        $tgMsg .= "📐 $size (" . $sizeConfig['w'] . '×' . $sizeConfig['h'] . " см)\n";
        $tgMsg .= "📄 $paper";
        if ($paperConfig['delta'] > 0) $tgMsg .= " (+" . $paperConfig['delta'] . "₽)";
        $tgMsg .= "\n🎨 $correction";
        if ($correctionConfig['delta'] > 0) $tgMsg .= " (+" . $correctionConfig['delta'] . "₽)";
        $tgMsg .= "\n🔢 Тираж: $qty экз/фото\n";
        $tgMsg .= "📷 Фото: <b>$photoCount</b> шт\n";
        $tgMsg .= '📦 Отпечатков: <b>' . ($photoCount * $qty) . "</b> шт\n";

        if (!empty($selectedProcessing)) {
            $tgMsg .= "\n🛠 <b>Доп. услуги:</b>\n";
            foreach ($selectedProcessing as $proc) {
                $tgMsg .= "• " . $proc['name'] . " (" . $proc['price'] . "₽)\n";
            }
        }

        if ($deliveryConfig) {
            $tgMsg .= "\n🚚 <b>Доставка:</b> " . $deliveryConfig['name'];
            if ($deliveryConfig['price'] > 0) $tgMsg .= " (+" . $deliveryConfig['price'] . "₽)";
            $tgMsg .= "\n";
        }

        if ($discount > 0) {
            $tgMsg .= "\n🎯 <b>Скидка:</b> $discount% (-" . number_format($discountAmount, 0) . "₽)\n";
        }

        $tgMsg .= "\n💰 <b>ИТОГО: " . number_format($totalPrice, 0) . " ₽</b>\n";
        $tgMsg .= "💳 " . ($paymentMethod === 'online' ? 'Онлайн оплата' : 'При получении') . "\n";

        if ($comment) {
            $tgMsg .= "\n💬 <i>" . mb_substr($comment, 0, 100);
            if (mb_strlen($comment) > 100) $tgMsg .= '...';
            $tgMsg .= '</i>';
        }

        $telegramSent = send_telegram($cfg, $tgMsg);

        // Формируем итоговое сообщение
        $response['message'] = '✅ Заказ успешно отправлен! Мы свяжемся с вами в ближайшее время.';

        if (!$emailSent && !$telegramSent) {
            $response['warning'] = '⚠️ Заказ сохранен, но возможны проблемы с доставкой уведомлений.';
        } elseif (!$emailSent) {
            $response['warning'] = '⚠️ Заказ сохранен, но письмо на email не отправлено.';
        } elseif (!$telegramSent) {
            $response['warning'] = '⚠️ Заказ сохранен, но Telegram уведомление не отправлено.';
        }

        echo json_encode($response);

    } catch (Exception $e) {
        // Логируем ошибку
        $errorLog = [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString(),
            'post_data' => $_POST,
            'files_data' => $_FILES,
            'timestamp' => date('Y-m-d H:i:s'),
            'ip' => $_SERVER['REMOTE_ADDR'] ?? ''
        ];
        @file_put_contents($ordersLog, '['.date('Y-m-d H:i:s').'] ERROR: '.json_encode($errorLog, JSON_UNESCAPED_UNICODE).PHP_EOL, FILE_APPEND);

        echo json_encode(['ok' => false, 'error' => $e->getMessage()]);
    }
    exit;
}

// Тема оформления из основного конфига
$T = $cfg['theme'] ?? [];
$cardOpacity = is_numeric($T['card_opacity']) ? max(0.3, min(1, (float)$T['card_opacity'])) : 0.65;
$blur = (int)($T['blur'] ?? 12);
$radius = (int)($T['radius'] ?? 16);
$shadow = (float)($T['shadow'] ?? 0.12);
$container = (int)($T['container'] ?? 1200);
$muted = $T['muted'] ?? '#5c6b84';
$bg = $T['bg'] ?? '#f3f7ff';
$text = $T['text'] ?? '#0e1220';
$brandCol = $T['brand'] ?? '#FF8A00';
$accentCol = $T['accent'] ?? '#2D5BFF';
?>
<!doctype html>
<html lang='ru'>
<head>
  <meta charset='utf-8'>
  <title>Премиум фотоконструктор с редактором — <?=esc($cfg['brand'] ?? 'ПРИНТСС')?></title>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <meta name='description' content='Профессиональный заказ фотопечати онлайн с редактором изображений. Загрузите фото, настройте яркость и контраст, выберите размер. Быстро, качественно, удобно.'>
  <meta name='keywords' content='фотопечать, редактор фото, печать фото, фотоуслуги, онлайн заказ фото, яркость, контраст, кадрирование'>

  <style>
    :root{
      --bg: <?=esc($bg)?>;
      --text: <?=esc($text)?>;
      --muted: <?=esc($muted)?>;
      --brand: <?=esc($brandCol)?>;
      --accent: <?=esc($accentCol)?>;
      --card: rgba(255,255,255, <?=esc(number_format($cardOpacity,2,'.',''))?>);
      --glass-blur: <?=esc($blur)?>px;
      --radius: <?=esc($radius)?>px;
      --shadow: 0 10px 30px rgba(0,0,0, <?=esc(number_format($shadow,2,'.',''))?>);
      --container: <?=esc($container)?>px;
    }

    *{box-sizing:border-box}
    body{
      margin:0;
      font-family:Inter,system-ui,Segoe UI,Arial;
      color:var(--text);
      background:var(--bg);
      background:
        radial-gradient(900px 300px at 70% -10%, rgba(45,91,255,.08), transparent 60%),
        radial-gradient(700px 280px at 20% -20%, rgba(255,138,0,.10), transparent 70%),
        var(--bg);
      line-height: 1.5;
      min-height: 100vh;
    }

    .topbar{
      position:sticky;
      top:0;
      z-index:50;
      background:var(--card);
      backdrop-filter:blur(var(--glass-blur)) saturate(160%);
      border-bottom:1px solid rgba(0,0,0,.08);
      padding: 12px 0;
    }

    .topflex{
      max-width:var(--container);
      margin:0 auto;
      padding:0 20px;
      display:flex;
      align-items:center;
      justify-content:space-between;
      gap:12px;
      flex-wrap:wrap
    }

    .logo{
      display:flex;
      gap:12px;
      align-items:center;
      text-decoration:none;
      color:inherit;
    }

    .logo-badge{
      width:40px;
      height:40px;
      border-radius:10px;
      background:linear-gradient(135deg, var(--brand), #FFB14D);
      display:grid;
      place-items:center;
      color:#000;
      font-weight:800;
      font-size:16px;
    }

    .logo-title{
      font-weight:700;
      font-size:18px;
    }

    .nav{
      display:flex;
      gap:8px;
      flex-wrap:wrap;
    }

    .nav a{
      color:inherit;
      padding:8px 12px;
      border-radius:8px;
      font-weight:500;
      transition:all 0.2s;
      text-decoration:none;
      font-size:14px;
    }

    .nav a:hover{
      background:rgba(0,0,0,.06);
    }

    .wrap{
      max-width:var(--container);
      margin:20px auto;
      display:grid;
      grid-template-columns:1.2fr 0.8fr;
      gap:20px;
      padding:0 20px;
    }

    @media(max-width:1000px){
      .wrap{grid-template-columns:1fr}
    }

    .card{
      background:var(--card);
      border:1px solid rgba(0,0,0,.08);
      border-radius:var(--radius);
      backdrop-filter:blur(var(--glass-blur));
      box-shadow:var(--shadow);
      padding:24px;
    }

    h2{
      margin:0 0 16px;
      font-size:20px;
      font-weight:700;
    }

    .form-group{
      margin-bottom:16px;
    }

    .form-group label{
      display:block;
      color:var(--text);
      font-size:14px;
      font-weight:600;
      margin-bottom:6px;
    }

    input[type='text'], input[type='email'], input[type='number'], select, textarea{
      width:100%;
      padding:12px;
      border-radius:8px;
      border:1px solid rgba(0,0,0,.15);
      background:#fff;
      color:var(--text);
      font-size:14px;
      transition: border-color 0.2s;
    }

    input:focus, select:focus, textarea:focus{
      border-color:var(--accent);
      outline:none;
    }

    textarea{
      min-height:80px;
      resize:vertical;
    }

    .uploader{
      border:2px dashed rgba(0,0,0,.2);
      border-radius:12px;
      padding:30px 20px;
      text-align:center;
      background:rgba(0,0,0,.02);
      position:relative;
      transition: all 0.3s;
    }

    .uploader.dragover{
      border-color:var(--accent);
      background:rgba(45,91,255,.04);
    }

    .uploader input[type=file]{
      position:absolute;
      inset:0;
      opacity:0;
      cursor:pointer;
    }

    .uploader .hint{
      color:var(--muted);
      font-size:14px;
    }

    .uploader .icon{
      font-size:48px;
      margin-bottom:12px;
      color:var(--accent);
    }

    .previews{
      margin-top:20px;
      display:grid;
      grid-template-columns:repeat(auto-fill, minmax(200px, 1fr));
      gap:12px;
    }

    .thumb{
      border:1px solid rgba(0,0,0,.1);
      border-radius:12px;
      overflow:hidden;
      background:#fff;
      box-shadow:0 4px 12px rgba(0,0,0,.1);
      position: relative;
      transition: all 0.3s;
    }

    .thumb:hover{
      transform: translateY(-2px);
      box-shadow:0 8px 25px rgba(0,0,0,.15);
    }

    .thumb .img{
      width:100%;
      height:150px;
      background:#f8f9fa center/cover no-repeat;
      position: relative;
    }

    .thumb .info{
      padding: 12px;
      font-size: 11px;
      color: var(--muted);
    }

    .thumb .remove-btn{
      position: absolute;
      top: 6px;
      right: 6px;
      width: 28px;
      height: 28px;
      background: rgba(255, 0, 0, 0.9);
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      font-size: 14px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      z-index: 10;
    }

    .thumb .remove-btn:hover{
      background: rgba(255, 0, 0, 1);
      transform: scale(1.1);
    }

    .thumb .edit-btn{
      position: absolute;
      top: 6px;
      left: 6px;
      width: 28px;
      height: 28px;
      background: rgba(45, 91, 255, 0.9);
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      z-index: 10;
    }

    .thumb .edit-btn:hover{
      background: rgba(45, 91, 255, 1);
      transform: scale(1.1);
    }

    /* РЕДАКТОР ИЗОБРАЖЕНИЙ */
    .photo-editor{
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.9);
      display: none;
      z-index: 1000;
      align-items: center;
      justify-content: center;
    }

    .photo-editor.show{
      display: flex;
    }

    .editor-content{
      background: var(--card);
      border-radius: 16px;
      width: 90%;
      max-width: 900px;
      max-height: 90vh;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .editor-header{
      padding: 20px;
      border-bottom: 1px solid rgba(0,0,0,.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .editor-body{
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    .editor-preview{
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #000;
      position: relative;
      overflow: hidden;
    }

    .editor-image{
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }

    .crop-overlay{
      position: absolute;
      border: 2px solid var(--accent);
      cursor: move;
      display: none;
    }

    .crop-overlay.show{
      display: block;
    }

    .crop-handle{
      position: absolute;
      width: 8px;
      height: 8px;
      background: var(--accent);
      border: 1px solid #fff;
      cursor: nw-resize;
    }

    .editor-controls{
      width: 280px;
      padding: 20px;
      background: var(--card);
      border-left: 1px solid rgba(0,0,0,.1);
      overflow-y: auto;
    }

    .control-group{
      margin-bottom: 20px;
      padding-bottom: 16px;
      border-bottom: 1px solid rgba(0,0,0,.1);
    }

    .control-group:last-child{
      border-bottom: none;
    }

    .control-group label{
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
      font-size: 13px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      color: var(--text);
    }

    .control-slider{
      width: 100%;
      margin: 8px 0;
      accent-color: var(--accent);
    }

    .control-value{
      text-align: center;
      font-size: 12px;
      color: var(--muted);
      margin-top: 4px;
    }

    .crop-controls{
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
      margin-top: 12px;
    }

    .btn-crop{
      padding: 6px 12px;
      border: 1px solid rgba(0,0,0,.2);
      background: #fff;
      color: var(--text);
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.2s;
    }

    .btn-crop:hover{
      background: var(--accent);
      color: #fff;
      border-color: var(--accent);
    }

    .btn-crop.active{
      background: var(--accent);
      color: #fff;
      border-color: var(--accent);
    }

    .calc{
      margin-top:16px;
      padding:16px;
      background:rgba(255,138,0,.08);
      border-radius:8px;
    }

    .calc .price-line{
      display:flex;
      justify-content:space-between;
      margin:4px 0;
      font-size:13px;
    }

    .calc .total{
      margin-top:12px;
      padding-top:12px;
      border-top:1px solid rgba(0,0,0,.1);
      display:flex;
      justify-content:space-between;
      align-items:center;
    }

    .calc #price{
      font-weight:800;
      font-size:24px;
      color:var(--brand);
    }

    .note{
      color:var(--muted);
      font-size:13px;
      margin-top:8px;
    }

    .btn{
      display:inline-flex;
      align-items:center;
      gap:8px;
      padding:12px 20px;
      border-radius:8px;
      text-decoration:none;
      font-weight:600;
      transition:all 0.2s;
      border:none;
      cursor:pointer;
      font-size:14px;
    }

    .btn-primary{
      background:linear-gradient(135deg, var(--accent), #00C2FF);
      color:#fff;
    }

    .btn-secondary{
      background:var(--card);
      color:var(--text);
      border:1px solid rgba(0,0,0,.1);
    }

    .btn-success{
      background:linear-gradient(135deg, #28a745, #20c997);
      color:#fff;
    }

    .btn-danger{
      background:linear-gradient(135deg, #dc3545, #fd7e14);
      color:#fff;
    }

    .btn:hover{
      transform:translateY(-1px);
      box-shadow:0 4px 12px rgba(0,0,0,.2);
    }

    .btn:disabled{
      opacity:0.6;
      cursor:not-allowed;
      transform:none;
    }

    .msg{
      margin-top:12px;
      font-size:14px;
      padding:12px;
      border-radius:8px;
    }

    .msg.success{
      background:#d4edda;
      color:#155724;
      border:1px solid #c3e6cb;
    }

    .msg.error{
      background:#f8d7da;
      color:#721c24;
      border:1px solid #f5c6cb;
    }

    .msg.warning{
      background:#fff3cd;
      color:#856404;
      border:1px solid #ffeaa7;
    }

    .payment-methods{
      margin:16px 0;
      padding:16px;
      background:rgba(0,0,0,.03);
      border-radius:8px;
    }

    .payment-option{
      display:flex;
      align-items:center;
      gap:8px;
      margin:8px 0;
    }

    .payment-option input[type=radio]{
      margin:0;
      width:auto;
    }

    .options-group{
      margin:16px 0;
      padding:16px;
      background:rgba(0,0,0,.03);
      border-radius:8px;
    }

    .option-item{
      display:flex;
      align-items:center;
      gap:8px;
      margin:8px 0;
    }

    .option-item input[type=checkbox]{
      margin:0;
      width:auto;
    }

    .discount-badge{
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
      margin-left: 8px;
    }

    .loading{
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }

    .loading.show{
      display: flex;
    }

    .loading-content{
      background: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
    }

    .spinner{
      width: 40px;
      height: 40px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid var(--accent);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .disabled-notice{
      text-align:center;
      padding:60px 20px;
      color:var(--muted);
    }

    .disabled-notice h2{
      color:var(--text);
      margin-bottom:16px;
    }

    .preview-badge{
      position: absolute;
      top: 8px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255, 138, 0, 0.9);
      color: #fff;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 10px;
      font-weight: 600;
      z-index: 5;
    }

    @media(max-width:768px){
      .topflex{
        flex-direction:column;
        text-align:center;
      }
      .nav{
        justify-content:center;
      }
      .wrap{
        padding:0 16px;
        gap:16px;
      }
      .card{
        padding:20px;
      }
      .previews{
        grid-template-columns:repeat(auto-fill, minmax(150px, 1fr));
        gap:8px;
      }
      .editor-content{
        width: 95%;
        height: 95vh;
      }
      .editor-body{
        flex-direction: column;
      }
      .editor-controls{
        width: 100%;
        max-height: 200px;
        border-left: none;
        border-top: 1px solid rgba(0,0,0,.1);
      }
    }
  </style>
</head>
<body>
  <?php if (empty($photoConfig['enabled'])): ?>
    <div class='disabled-notice'>
      <h2>⚠️ Фотоконструктор временно недоступен</h2>
      <p>Приносим извинения за неудобства. Сервис находится на техническом обслуживании.</p>
      <a href='/' class='btn btn-primary'>🏠 Вернуться на главную</a>
    </div>
  <?php else: ?>

  <header class='topbar'>
    <div class='topflex'>
      <a href='/' class='logo'>
        <div class='logo-badge'>П</div>
        <div>
          <div class='logo-title'><?=esc($cfg['brand'] ?? 'ПРИНТСС')?></div>
          <div style='font-size:12px;color:var(--muted)'>Премиум фотоконструктор с редактором</div>
        </div>
      </a>

      <nav class='nav'>
        <a href='/'>🏠 Главная</a>
        <a href='products.php'>🛍️ Товары</a>
        <a href='tel:<?=esc($cfg['phone_raw'] ?? '+79522003990')?>'><?=esc($cfg['phone_display'] ?? '+7 (952) 200-39-90')?></a>
      </nav>
    </div>
  </header>

  <main class='wrap'>
    <section class='card'>
      <h2>📸 Загрузите фотографии с редактором изображений</h2>
      <p style='color:var(--muted);margin-bottom:20px'>
        Выберите до <?=esc($photoConfig['max_photos'])?> фотографий для печати.
        Поддерживаются форматы: <?=esc(strtoupper(implode(', ', $photoConfig['supported_formats'])))?>. 
        Максимальный размер файла: <?=esc($photoConfig['max_file_size'])?>МБ.
        <br><strong>🎨 Новое: встроенный редактор для настройки яркости, контраста и кадрирования!</strong>
      </p>

      <div class='uploader' id='uploader'>
        <input type='file' id='files' accept='image/*' multiple>
        <div class='icon'>📷</div>
        <div class='hint'>Перетащите фото сюда или нажмите для выбора</div>
        <div style='font-size:12px;color:var(--muted);margin-top:8px'>
          Максимум <?=esc($photoConfig['max_photos'])?> файлов, до <?=esc($photoConfig['max_file_size'])?>МБ каждый
        </div>
      </div>

      <div id='previews' class='previews'></div>
    </section>

    <section class='card'>
      <h2>⚙️ Параметры печати</h2>

      <div class='form-group'>
        <label>Размер фото</label>
        <select id='size'>
          <?php foreach($enabledSizes as $size): ?>
            <option value='<?=esc($size['name'])?>' data-price='<?=esc($size['base'])?>' <?=!empty($size['popular']) ? 'data-popular=\'1\'' : ''?>>
              <?=esc($size['name'])?> (<?=esc($size['w'])?>×<?=esc($size['h'])?>см) — <?=esc($size['base'])?> ₽
              <?=!empty($size['popular']) ? ' ⭐' : ''?>
            </option>
          <?php endforeach; ?>
        </select>
      </div>

      <div class='form-group'>
        <label>Тип бумаги</label>
        <select id='paper'>
          <?php foreach($enabledPapers as $paper): ?>
            <option value='<?=esc($paper['name'])?>' data-delta='<?=esc($paper['delta'])?>' title='<?=esc($paper['description'])?>'>
              <?=esc($paper['name'])?>
              <?php if($paper['delta'] > 0): ?> (+<?=esc($paper['delta'])?> ₽)<?php endif; ?>
            </option>
          <?php endforeach; ?>
        </select>
      </div>

      <div class='form-group'>
        <label>Тираж на каждое фото</label>
        <input type='number' id='qty' min='1' max='100' value='1'>
      </div>

      <div class='form-group'>
        <label>Цветокоррекция</label>
        <select id='correction'>
          <?php foreach($enabledCorrections as $correction): ?>
            <option value='<?=esc($correction['name'])?>' data-delta='<?=esc($correction['delta'])?>' title='<?=esc($correction['description'])?>'>
              <?=esc($correction['name'])?>
              <?php if($correction['delta'] > 0): ?> (+<?=esc($correction['delta'])?> ₽)<?php endif; ?>
            </option>
          <?php endforeach; ?>
        </select>
      </div>

      <?php if (!empty($enabledProcessingOptions)): ?>
      <div class='options-group'>
        <div style='font-weight:600;margin-bottom:8px'>🛠️ Дополнительные услуги (на каждое фото):</div>
        <?php foreach($enabledProcessingOptions as $i => $option): ?>
          <div class='option-item'>
            <input type='checkbox' id='proc_<?=$i?>' name='processing_options[]' value='<?=esc($option['name'])?>' data-price='<?=esc($option['price'])?>'>
            <label for='proc_<?=$i?>' style='margin:0;font-weight:normal;font-size:13px'>
              <?=esc($option['name'])?> (+<?=esc($option['price'])?> ₽)
              <?php if (!empty($option['description'])): ?>
                <small style='color:var(--muted);display:block'><?=esc($option['description'])?></small>
              <?php endif; ?>
            </label>
          </div>
        <?php endforeach; ?>
      </div>
      <?php endif; ?>

      <?php if (!empty($enabledDeliveryOptions)): ?>
      <div class='form-group'>
        <label>Способ получения</label>
        <select id='delivery'>
          <option value=''>Выберите способ</option>
          <?php foreach($enabledDeliveryOptions as $option): ?>
            <option value='<?=esc($option['name'])?>' data-price='<?=esc($option['price'])?>'>
              <?=esc($option['name'])?>
              <?php if($option['price'] > 0): ?> (+<?=esc($option['price'])?> ₽)<?php endif; ?>
            </option>
          <?php endforeach; ?>
        </select>
      </div>
      <?php endif; ?>

      <div class='calc'>
        <div class='price-line'>
          <span>Фото загружено:</span>
          <span id='photoCount'>0 шт</span>
        </div>
        <div class='price-line'>
          <span>Всего отпечатков:</span>
          <span id='totalCopies'>0 шт</span>
        </div>
        <div class='price-line'>
          <span>Цена за отпечаток:</span>
          <span id='pricePerCopy'>0 ₽</span>
        </div>
        <div id='processingLine' class='price-line' style='display:none'>
          <span>Дополнительные услуги:</span>
          <span id='processingCost'>0 ₽</span>
        </div>
        <div id='deliveryLine' class='price-line' style='display:none'>
          <span>Доставка:</span>
          <span id='deliveryCost'>0 ₽</span>
        </div>
        <div id='discountLine' class='price-line' style='display:none;color:var(--brand)'>
          <span>Скидка:</span>
          <span id='discountText'>0%</span>
        </div>
        <div class='total'>
          <div style='font-size:14px;color:var(--muted)'>Примерная стоимость:</div>
          <div id='price'>0 ₽</div>
        </div>
      </div>

      <div class='note'>
        💡 Точная стоимость будет рассчитана менеджером с учетом всех параметров и пожеланий.
        <?php if (!empty($enabledDiscounts)): ?>
          <br>🎯 Действуют скидки за количество:
          <?php foreach($enabledDiscounts as $discount): ?>
            от <?=esc($discount['threshold'])?> фото — <?=esc($discount['discount_percent'])?>%;
          <?php endforeach; ?>
        <?php endif; ?>
      </div>

      <h2 style='margin-top:24px'>💬 Комментарий</h2>
      <textarea id='comment' placeholder='Укажите особые пожелания: печать без полей, кадрирование, коррекция цвета и т.д.'></textarea>

      <h2 style='margin-top:24px'>📞 Контактные данные</h2>

      <div class='form-group'>
        <label>Ваше имя *</label>
        <input type='text' id='name' placeholder='Иван Иванов' required>
      </div>

      <div class='form-group'>
        <label>Телефон *</label>
        <input type='text' id='phone' placeholder='+7 (999) 123-45-67' required>
      </div>

      <div class='form-group'>
        <label>Email (для уведомлений)</label>
        <input type='email' id='email' placeholder='ivan@example.com'>
      </div>

      <?php if (!empty($cfg['yukassa']['enabled']) && !empty($cfg['yukassa']['services']['photo_constructor'])): ?>
      <div class='payment-methods'>
        <div style='font-weight:600;margin-bottom:8px'>💳 Способ оплаты:</div>
        <div class='payment-option'>
          <input type='radio' id='payment_offline' name='payment_method' value='offline' checked>
          <label for='payment_offline'>При получении (наличные/карта)</label>
        </div>
        <div class='payment-option'>
          <input type='radio' id='payment_online' name='payment_method' value='online'>
          <label for='payment_online'>Онлайн оплата (ЮКасса)</label>
        </div>
      </div>
      <?php endif; ?>

      <button id='btnSend' class='btn btn-primary' style='width:100%;margin-top:16px'>
        📤 Отправить заказ
      </button>

      <div id='msg' class='msg' style='display:none'></div>
    </section>
  </main>

  <!-- РЕДАКТОР ИЗОБРАЖЕНИЙ -->
  <div id='photoEditor' class='photo-editor'>
    <div class='editor-content'>
      <div class='editor-header'>
        <h3>🎨 Редактор изображений</h3>
        <div>
          <button class='btn btn-success' onclick='applyEdits()'>✓ Применить</button>
          <button class='btn btn-secondary' onclick='closeEditor()'>Отмена</button>
        </div>
      </div>
      <div class='editor-body'>
        <div class='editor-preview'>
          <canvas id='editorCanvas'></canvas>
          <div id='cropOverlay' class='crop-overlay'>
            <div class='crop-handle' style='top:-4px;left:-4px'></div>
            <div class='crop-handle' style='top:-4px;right:-4px'></div>
            <div class='crop-handle' style='bottom:-4px;left:-4px'></div>
            <div class='crop-handle' style='bottom:-4px;right:-4px'></div>
          </div>
        </div>
        <div class='editor-controls'>
          <div class='control-group'>
            <label>Яркость</label>
            <input type='range' class='control-slider' id='brightnessSlider' min='-100' max='100' value='0'>
            <div class='control-value' id='brightnessValue'>0</div>
          </div>

          <div class='control-group'>
            <label>Контрастность</label>
            <input type='range' class='control-slider' id='contrastSlider' min='-100' max='100' value='0'>
            <div class='control-value' id='contrastValue'>0</div>
          </div>

          <div class='control-group'>
            <label>Кадрирование</label>
            <div class='crop-controls'>
              <button class='btn-crop' data-ratio='free'>Свободно</button>
              <button class='btn-crop' data-ratio='square'>Квадрат</button>
              <button class='btn-crop' data-ratio='4:3'>4:3</button>
              <button class='btn-crop' data-ratio='16:9'>16:9</button>
              <button class='btn-crop' data-ratio='3:4'>3:4</button>
              <button class='btn-crop' data-ratio='2:3'>2:3</button>
            </div>
            <div style='margin-top:12px'>
              <button class='btn btn-secondary' style='width:100%' onclick='enableCrop()'>🔲 Включить кадрирование</button>
            </div>
          </div>

          <div class='control-group'>
            <label>Действия</label>
            <button class='btn btn-secondary' style='width:100%;margin-bottom:8px' onclick='resetEdits()'>🔄 Сброс</button>
            <button class='btn btn-danger' style='width:100%' onclick='closeEditor()'>❌ Отмена</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id='loading' class='loading'>
    <div class='loading-content'>
      <div class='spinner'></div>
      <div>Отправка заказа...</div>
    </div>
  </div>

  <?php endif; ?>

  <script>
    // Полная конфигурация из админки
    let CONFIG = null;
    const MAX_FILE_SIZE_MB = <?=esc($photoConfig['max_file_size'] ?? 10)?>;
    const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;

    // Загружаем конфиг динамически
    fetch('?api=config')
      .then(response => response.json())
      .then(config => {
        CONFIG = config;
        console.log('Конфиг загружен из админки:', CONFIG);
        if (!CONFIG.enabled) {
          document.body.innerHTML = '<div class="disabled-notice"><h2>⚠️ Фотоконструктор отключен</h2><p>Сервис временно недоступен.</p></div>';
        }
      })
      .catch(error => {
        console.error('Ошибка загрузки конфига:', error);
        CONFIG = {
          enabled: true,
          max_photos: <?=esc($photoConfig['max_photos'] ?? 100)?>,
          max_file_size: <?=esc($photoConfig['max_file_size'] ?? 10)?>
        };
      });

    // Глобальные переменные
    const files = document.getElementById('files');
    const previews = document.getElementById('previews');
    const priceEl = document.getElementById('price');
    const uploader = document.getElementById('uploader');
    const photoCountEl = document.getElementById('photoCount');
    const totalCopiesEl = document.getElementById('totalCopies');
    const pricePerCopyEl = document.getElementById('pricePerCopy');
    const processingLineEl = document.getElementById('processingLine');
    const processingCostEl = document.getElementById('processingCost');
    const deliveryLineEl = document.getElementById('deliveryLine');
    const deliveryCostEl = document.getElementById('deliveryCost');
    const discountLineEl = document.getElementById('discountLine');
    const discountTextEl = document.getElementById('discountText');

    let uploadedFiles = [];
    let currentDiscount = 0;
    let currentProcessingCost = 0;
    let currentDeliveryCost = 0;

    // РЕДАКТОР ИЗОБРАЖЕНИЙ
    let currentEditingIndex = -1;
    let editorCanvas = null;
    let editorCtx = null;
    let originalImageData = null;
    let currentImage = null;
    let editParams = {};
    let cropMode = false;
    let cropData = null;

    // Инициализация редактора
    function initEditor() {
      editorCanvas = document.getElementById('editorCanvas');
      editorCtx = editorCanvas.getContext('2d');

      // Слушатели для слайдеров
      document.getElementById('brightnessSlider').addEventListener('input', updatePreview);
      document.getElementById('contrastSlider').addEventListener('input', updatePreview);

      // Кнопки соотношений кадрирования
      document.querySelectorAll('.btn-crop').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.btn-crop').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
        });
      });
    }

    function openEditor(fileIndex) {
      if (fileIndex < 0 || fileIndex >= uploadedFiles.length) return;

      currentEditingIndex = fileIndex;
      const file = uploadedFiles[fileIndex];

      // Загружаем параметры редактирования если есть
      editParams = file.editParams || {
        brightness: 0,
        contrast: 0,
        crop: null
      };

      // Устанавливаем значения слайдеров
      document.getElementById('brightnessSlider').value = editParams.brightness || 0;
      document.getElementById('contrastSlider').value = editParams.contrast || 0;
      document.getElementById('brightnessValue').textContent = editParams.brightness || 0;
      document.getElementById('contrastValue').textContent = editParams.contrast || 0;

      // Создаем изображение
      const img = new Image();
      img.onload = function() {
        currentImage = img;
        originalImageData = null;
        cropData = editParams.crop;

        // Размеры канваса
        const maxWidth = 600;
        const maxHeight = 400;
        let { width, height } = img;

        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }

        editorCanvas.width = width;
        editorCanvas.height = height;
        editorCanvas.style.maxWidth = '100%';
        editorCanvas.style.maxHeight = '100%';

        updatePreview();
        document.getElementById('photoEditor').classList.add('show');
      };

      img.src = file.url;
    }

    function updatePreview() {
      if (!currentImage || !editorCtx) return;

      const brightness = parseInt(document.getElementById('brightnessSlider').value);
      const contrast = parseInt(document.getElementById('contrastSlider').value);

      document.getElementById('brightnessValue').textContent = brightness;
      document.getElementById('contrastValue').textContent = contrast;

      // Очищаем канвас
      editorCtx.clearRect(0, 0, editorCanvas.width, editorCanvas.height);

      // Рисуем исходное изображение
      editorCtx.drawImage(currentImage, 0, 0, editorCanvas.width, editorCanvas.height);

      // Применяем фильтры
      if (brightness !== 0 || contrast !== 0) {
        const imageData = editorCtx.getImageData(0, 0, editorCanvas.width, editorCanvas.height);
        const data = imageData.data;

        for (let i = 0; i < data.length; i += 4) {
          // Яркость
          data[i] = Math.max(0, Math.min(255, data[i] + brightness));     // R
          data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + brightness)); // G
          data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + brightness)); // B

          // Контрастность
          if (contrast !== 0) {
            const factor = (259 * (contrast + 255)) / (255 * (259 - contrast));
            data[i] = Math.max(0, Math.min(255, factor * (data[i] - 128) + 128));     // R
            data[i + 1] = Math.max(0, Math.min(255, factor * (data[i + 1] - 128) + 128)); // G
            data[i + 2] = Math.max(0, Math.min(255, factor * (data[i + 2] - 128) + 128)); // B
          }
        }

        editorCtx.putImageData(imageData, 0, 0);
      }

      // Показываем область кадрирования если есть
      if (cropData) {
        drawCropOverlay();
      }
    }

    function enableCrop() {
      cropMode = !cropMode;
      const overlay = document.getElementById('cropOverlay');

      if (cropMode) {
        if (!cropData) {
          cropData = {
            x: editorCanvas.width * 0.1,
            y: editorCanvas.height * 0.1,
            width: editorCanvas.width * 0.8,
            height: editorCanvas.height * 0.8
          };
        }
        overlay.classList.add('show');
        setupCropHandlers();
      } else {
        overlay.classList.remove('show');
        cropData = null;
      }
    }

    function setupCropHandlers() {
      // Реализация drag & drop для кадрирования
      // Упрощенная версия для демонстрации
      console.log('Кадрирование включено. Функционал в разработке.');
    }

    function drawCropOverlay() {
      if (!cropData) return;

      editorCtx.save();
      editorCtx.strokeStyle = '#2D5BFF';
      editorCtx.lineWidth = 2;
      editorCtx.strokeRect(cropData.x, cropData.y, cropData.width, cropData.height);
      editorCtx.restore();
    }

    function resetEdits() {
      document.getElementById('brightnessSlider').value = 0;
      document.getElementById('contrastSlider').value = 0;
      cropData = null;
      document.getElementById('cropOverlay').classList.remove('show');
      updatePreview();
    }

    function applyEdits() {
      if (currentEditingIndex >= 0 && currentEditingIndex < uploadedFiles.length) {
        const brightness = parseInt(document.getElementById('brightnessSlider').value);
        const contrast = parseInt(document.getElementById('contrastSlider').value);

        // Сохраняем параметры редактирования
        uploadedFiles[currentEditingIndex].editParams = {
          brightness: brightness,
          contrast: contrast,
          crop: cropData
        };

        // Обновляем превью миниатюры
        updateThumbnail(currentEditingIndex);

        closeEditor();
        showMessage('✅ Настройки изображения применены', 'success');
        setTimeout(() => hideMessage(), 2000);
      }
    }

    function closeEditor() {
      document.getElementById('photoEditor').classList.remove('show');
      currentEditingIndex = -1;
      cropMode = false;
      cropData = null;
    }

    function updateThumbnail(index) {
      const file = uploadedFiles[index];
      const thumb = document.querySelector('[data-index="' + index + '"] .img');

      if (thumb && file.editParams && (file.editParams.brightness !== 0 || file.editParams.contrast !== 0)) {
        // Добавляем значок что изображение отредактировано
        let badge = document.querySelector('[data-index="' + index + '"] .preview-badge');
        if (!badge) {
          badge = document.createElement('div');
          badge.className = 'preview-badge';
          badge.textContent = '🎨 Отредактировано';
          document.querySelector('[data-index="' + index + '"]').appendChild(badge);
        }
      }
    }

    // Расчет стоимости
    function calcPrice() {
      const sizeSelect = document.getElementById('size');
      const paperSelect = document.getElementById('paper');
      const correctionSelect = document.getElementById('correction');
      const deliverySelect = document.getElementById('delivery');
      const qty = parseInt(document.getElementById('qty').value || '1');
      const photoCount = uploadedFiles.length;

      const basePrice = parseInt(sizeSelect.selectedOptions[0] && sizeSelect.selectedOptions[0].dataset.price || '0');
      const paperDelta = parseInt(paperSelect.selectedOptions[0] && paperSelect.selectedOptions[0].dataset.delta || '0');
      const correctionDelta = parseInt(correctionSelect.selectedOptions[0] && correctionSelect.selectedOptions[0].dataset.delta || '0');

      const pricePerPhoto = basePrice + paperDelta + correctionDelta;
      const totalCopies = photoCount * qty;

      // Дополнительные услуги
      currentProcessingCost = 0;
      const processingCheckboxes = document.querySelectorAll('input[name="processing_options[]"]:checked');
      processingCheckboxes.forEach(cb => {
        currentProcessingCost += parseInt(cb.dataset.price || '0');
      });
      const totalProcessingCost = currentProcessingCost * photoCount;

      // Доставка
      currentDeliveryCost = parseInt(deliverySelect.selectedOptions[0] && deliverySelect.selectedOptions[0].dataset.price || '0');

      let totalPrice = (pricePerPhoto * totalCopies) + totalProcessingCost + currentDeliveryCost;

      // Расчет скидки
      currentDiscount = 0;
      if (CONFIG && CONFIG.discounts) {
        const sortedDiscounts = CONFIG.discounts.sort((a, b) => b.threshold - a.threshold);
        for (const discount of sortedDiscounts) {
          if (photoCount >= discount.threshold) {
            currentDiscount = discount.discount_percent;
            break;
          }
        }
      }

      let discountAmount = 0;
      if (currentDiscount > 0) {
        discountAmount = ((pricePerPhoto * totalCopies) + totalProcessingCost) * (currentDiscount / 100);
        totalPrice -= discountAmount;
      }

      // Обновляем отображение
      photoCountEl.textContent = photoCount + ' шт';
      totalCopiesEl.textContent = totalCopies + ' шт';
      pricePerCopyEl.textContent = pricePerPhoto + ' ₽';

      if (totalProcessingCost > 0) {
        processingCostEl.textContent = '+' + totalProcessingCost + ' ₽';
        processingLineEl.style.display = 'flex';
      } else {
        processingLineEl.style.display = 'none';
      }

      if (currentDeliveryCost > 0) {
        deliveryCostEl.textContent = '+' + currentDeliveryCost + ' ₽';
        deliveryLineEl.style.display = 'flex';
      } else {
        deliveryLineEl.style.display = 'none';
      }

      if (currentDiscount > 0) {
        discountTextEl.textContent = '-' + currentDiscount + '% (-' + Math.round(discountAmount) + ' ₽)';
        discountLineEl.style.display = 'flex';
      } else {
        discountLineEl.style.display = 'none';
      }

      priceEl.textContent = Math.round(totalPrice).toLocaleString('ru-RU') + ' ₽';
    }

    // Добавление превью фото с кнопками редактирования и удаления
    function addThumb(file, index) {
      if (!file.type.startsWith('image/')) return;

      const url = URL.createObjectURL(file);
      file.url = url; // Сохраняем URL для редактора

      const div = document.createElement('div');
      div.className = 'thumb';
      div.dataset.index = index;
      div.innerHTML = '<div class="img" style="background-image:url(\'' + url + '\')"></div>' +
        '<button class="edit-btn" onclick="openEditor(' + index + ')" title="Редактировать фото">🎨</button>' +
        '<button class="remove-btn" onclick="removePhoto(' + index + ')" title="Удалить фото">×</button>' +
        '<div class="info"><div>' + file.name + '</div><div>' + (file.size/1024/1024).toFixed(1) + ' МБ</div></div>';
      previews.appendChild(div);
    }

    // Удаление фото
    function removePhoto(index) {
      if (index >= 0 && index < uploadedFiles.length) {
        URL.revokeObjectURL(uploadedFiles[index].url);
        uploadedFiles.splice(index, 1);
        updatePreviews();
        calcPrice();
      }
    }

    // Обновление превью после удаления
    function updatePreviews() {
      previews.innerHTML = '';
      uploadedFiles.forEach((file, index) => {
        addThumb(file, index);
        // Восстанавливаем бейдж если был отредактирован
        if (file.editParams && (file.editParams.brightness !== 0 || file.editParams.contrast !== 0)) {
          updateThumbnail(index);
        }
      });
    }

    // Обработка выбора файлов
    files.addEventListener('change', (e) => {
      const fileList = Array.from(e.target.files);
      processFiles(fileList);
      e.target.value = ''; // Сбрасываем input для повторного выбора
    });

    // Обработка файлов с валидацией
    function processFiles(fileList) {
      const validFiles = [];
      const errors = [];
      const maxPhotos = CONFIG ? CONFIG.max_photos : <?=esc($photoConfig['max_photos'] ?? 100)?>;

      for (const file of fileList) {
        if (uploadedFiles.length + validFiles.length >= maxPhotos) {
          errors.push('Превышен лимит в ' + maxPhotos + ' файлов');
          break;
        }

        if (!file.type.startsWith('image/')) {
          errors.push(file.name + ': неподдерживаемый формат');
          continue;
        }

        if (file.size > MAX_FILE_SIZE) {
          errors.push(file.name + ': размер превышает ' + MAX_FILE_SIZE_MB + 'МБ');
          continue;
        }

        // Добавляем пустые параметры редактирования
        file.editParams = {
          brightness: 0,
          contrast: 0,
          crop: null
        };

        validFiles.push(file);
      }

      // Добавляем валидные файлы
      uploadedFiles.push(...validFiles);
      updatePreviews();
      calcPrice();

      // Показываем ошибки если есть
      if (errors.length > 0) {
        showMessage('Некоторые файлы не загружены:\n• ' + errors.join('\n• '), 'warning');
      }

      if (validFiles.length > 0) {
        showMessage('✅ Загружено ' + validFiles.length + ' фото. Используйте кнопку 🎨 для редактирования', 'success');
        setTimeout(() => hideMessage(), 4000);
      }
    }

    // Drag & Drop
    uploader.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploader.classList.add('dragover');
    });

    uploader.addEventListener('dragleave', (e) => {
      if (!uploader.contains(e.relatedTarget)) {
        uploader.classList.remove('dragover');
      }
    });

    uploader.addEventListener('drop', (e) => {
      e.preventDefault();
      uploader.classList.remove('dragover');

      const droppedFiles = Array.from(e.dataTransfer.files);
      processFiles(droppedFiles);
    });

    // Слушатели изменений параметров
    ['size', 'paper', 'qty', 'correction', 'delivery'].forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('change', calcPrice);
        element.addEventListener('input', calcPrice);
      }
    });

    // Слушатели для дополнительных услуг
    document.querySelectorAll('input[name="processing_options[]"]').forEach(cb => {
      cb.addEventListener('change', calcPrice);
    });

    // Отправка формы
    document.getElementById('btnSend').addEventListener('click', async () => {
      if (!uploadedFiles.length) {
        showMessage('❌ Загрузите хотя бы одну фотографию', 'error');
        return;
      }

      const name = document.getElementById('name').value.trim();
      const phone = document.getElementById('phone').value.trim();
      const email = document.getElementById('email').value.trim();

      if (!name || !phone) {
        showMessage('❌ Заполните имя и телефон', 'error');
        return;
      }

      // Валидация телефона
      const phoneClean = phone.replace(/[^0-9+]/g, '');
      if (phoneClean.length < 10) {
        showMessage('❌ Некорректный номер телефона', 'error');
        return;
      }

      if (email && !isValidEmail(email)) {
        showMessage('❌ Некорректный email адрес', 'error');
        return;
      }

      const btn = document.getElementById('btnSend');
      const loading = document.getElementById('loading');
      const originalText = btn.textContent;

      btn.disabled = true;
      btn.textContent = 'Отправляем заказ...';
      loading.classList.add('show');

      try {
        const fd = new FormData();
        fd.append('mode', 'photo_order');

        // Добавляем фото с параметрами редактирования
        uploadedFiles.forEach((file, index) => {
          fd.append('photos[]', file);

          // Добавляем параметры редактирования для каждого фото
          if (file.editParams) {
            fd.append('edit_params[' + index + '][brightness]', file.editParams.brightness);
            fd.append('edit_params[' + index + '][contrast]', file.editParams.contrast);
            if (file.editParams.crop) {
              fd.append('edit_params[' + index + '][crop][x]', file.editParams.crop.x);
              fd.append('edit_params[' + index + '][crop][y]', file.editParams.crop.y);
              fd.append('edit_params[' + index + '][crop][width]', file.editParams.crop.width);
              fd.append('edit_params[' + index + '][crop][height]', file.editParams.crop.height);
            }
          }
        });

        // Добавляем параметры
        fd.append('size', document.getElementById('size').value);
        fd.append('paper', document.getElementById('paper').value);
        fd.append('qty', document.getElementById('qty').value);
        fd.append('correction', document.getElementById('correction').value);
        fd.append('name', name);
        fd.append('phone', phone);
        fd.append('email', email);
        fd.append('comment', document.getElementById('comment').value.trim());

        // Дополнительные услуги
        const processingOptions = [];
        document.querySelectorAll('input[name="processing_options[]"]:checked').forEach(cb => {
          processingOptions.push(cb.value);
        });
        if (processingOptions.length > 0) {
          processingOptions.forEach(option => {
            fd.append('processing_options[]', option);
          });
        }

        // Доставка
        const deliverySelect = document.getElementById('delivery');
        if (deliverySelect && deliverySelect.value) {
          fd.append('delivery', deliverySelect.value);
        }

        // Способ оплаты
        const paymentMethodEl = document.querySelector('input[name="payment_method"]:checked');
        if (paymentMethodEl) {
          fd.append('payment_method', paymentMethodEl.value);
        }

        const response = await fetch(location.href, {
          method: 'POST',
          body: fd
        });

        if (!response.ok) {
          throw new Error('Ошибка сети: ' + response.status);
        }

        const result = await response.json();

        if (result.ok) {
          let message = '✅ Заказ успешно отправлен!\n🆔 ID: ' + result.order_id + '\n📸 Фото: ' + result.photo_count + ' шт';

          if (result.total_copies) {
            message += '\n📦 Отпечатков: ' + result.total_copies + ' шт';
          }

          if (result.discount) {
            message += '\n🎯 Скидка: ' + result.discount + '%';
          }

          if (result.processing_cost) {
            message += '\n🛠️ Доп. услуги: +' + result.processing_cost + ' ₽';
          }

          if (result.delivery_cost) {
            message += '\n🚚 Доставка: +' + result.delivery_cost + ' ₽';
          }

          if (result.estimated_price) {
            message += '\n💰 Итого: ' + result.estimated_price.toLocaleString('ru-RU') + ' ₽';
          }

          message += '\n\n🎨 Использованные настройки редактора сохранены и переданы в заказ';

          if (result.warning) {
            message += '\n\n⚠️ ' + result.warning;
          } else {
            message += '\n\n📧 Уведомления отправлены на artcopy78@bk.ru';
          }

          showMessage(message, 'success');

          // Очищаем форму
          uploadedFiles.forEach(file => {
            if (file.url) URL.revokeObjectURL(file.url);
          });
          uploadedFiles = [];
          updatePreviews();
          document.getElementById('name').value = '';
          document.getElementById('phone').value = '';
          document.getElementById('email').value = '';
          document.getElementById('comment').value = '';

          // Сброс доп услуг
          document.querySelectorAll('input[name="processing_options[]"]').forEach(cb => {
            cb.checked = false;
          });

          calcPrice();

          // Обработка онлайн оплаты
          if (result.payment && result.payment_url) {
            showMessage('💳 Переходим к оплате через ЮКасса...', 'success');
            setTimeout(() => {
              window.open(result.payment_url, '_blank');
            }, 2500);
          }

        } else {
          showMessage('❌ ' + (result.error || 'Неизвестная ошибка сервера'), 'error');
        }

      } catch (error) {
        console.error('Ошибка отправки:', error);
        showMessage('❌ Ошибка соединения с сервером: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.textContent = originalText;
        loading.classList.remove('show');
      }
    });

    function showMessage(text, type) {
      const msg = document.getElementById('msg');
      msg.innerHTML = text.replace(/\n/g, '<br>');
      msg.className = 'msg ' + type;
      msg.style.display = 'block';
      msg.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    function hideMessage() {
      const msg = document.getElementById('msg');
      msg.style.display = 'none';
    }

    function isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    // Инициализация
    document.addEventListener('DOMContentLoaded', function() {
      initEditor();
      calcPrice();

      // Устанавливаем популярный размер по умолчанию
      const popularOption = document.querySelector('#size option[data-popular="1"]');
      if (popularOption) {
        document.getElementById('size').value = popularOption.value;
      }

      // Закрытие редактора по ESC
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && document.getElementById('photoEditor').classList.contains('show')) {
          closeEditor();
        }
      });

      console.log('🎯 ПРЕМИУМ Фотоконструктор с редактором изображений v2.0 инициализирован!');
      console.log('✅ Функции: яркость, контрастность, кадрирование');
      console.log('✅ CRM интеграция с архивом фото');
      console.log('✅ Все заказы на artcopy78@bk.ru');
    });
  </script>
</body>
</html>
